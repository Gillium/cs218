#include <iomanip>
#include <sstream>
#include <string>
#include "hash.h"
#ifndef TEMPLATE_HASH
#define TEMPLATE_HASH

template <class ItemType>
Hash<ItemType>::Hash(ItemType emptyVal, ItemType deletedVal)
// Constructor
// Pre:  None
// Post: data is initialized, length is zero, emptyItem is set to emptyVal, deletedItem is set to deletedVal
{
	emptyItem = emptyVal;
	deletedItem = deletedVal;
	
	for (unsigned int i = 0; i < ARRAY_SIZE; i++)
		data[i] = emptyItem;

	length = 0;
}

template <class ItemType>
Hash<ItemType>::~Hash()
// Deconstructor
// Pre:  data is initialized
// Post: data is destroyed
{
	for (unsigned int i = 0; i < ARRAY_SIZE; i++)
		data[i].~ItemType();
}

template <class ItemType>
Hash<ItemType>::Hash(const Hash<ItemType>& orginalHash)
// Copy constructor
// Pre:  data is initialized, orginalHash is a valid hash with same size as this
// Post: data contains a copy of the originalHash array, length is set to orginalHash length, emptyItem is set to orginalHash.emptyItem, deletedItem is set to orginalHash.deletedItem
{
	emptyItem = orginalHash.emptyItem;
	deletedItem = orginalHash.deletedItem;

	for (unsigned int i = 0; i < ARRAY_SIZE; i++)
		data[i] = orginalHash.data[i];

	length = orginalHash.length;
}

template <class ItemType>
void Hash<ItemType>::InsertItem(ItemType item)
// Function: Inserts item in hash
// Pre:  data is initialized
// Post: data contains item, length is incremented
{
	if (!IsFull())
	{
		int location;
		location = GetASCIIHash(item);

		while ((data[location] != emptyItem) && (data[location] != deletedItem))
			location = (location + 1) % ARRAY_SIZE;

		data[location] = item;
		length++;
	}
	else
		throw HashIsFull();
}

template <class ItemType>
bool Hash<ItemType>::Search(ItemType item)
// Function: Searches hash array for item, if found return true otherwise false
// Pre:	 data is initialized
// Post: function value = (item found)
{
	try
	{
		GetItemIndex(item);
		return true;
	}
	catch(ItemNotFound)
	{
		return false;
	}
}

template <class ItemType>
void Hash<ItemType>::DeleteItem(ItemType item)
// Function: If item is found in hash array delete item else throw exception
// Pre:	 data is intialized
// Post: If item is found, data does not contain item and length is decremented, otherwise throws ItemNotFound
{
	try
	{
		data[GetItemIndex(item)] = deletedItem;
		length--;
	}
	catch(ItemNotFound)
	{
		throw ItemNotFound();
	}
}

template <class ItemType>
ItemType Hash<ItemType>::RetrieveItem(ItemType item)
// Function: Retrieves item from hash
// Pre:		 data is initialized
// Post:	 None 
{
	try
	{
		return (data[GetItemIndex(item)]);
	}
	catch(ItemNotFound)
	{
		throw ItemNotFound();
	}
}

template <class ItemType>
QueueType<ItemType> Hash<ItemType>::RetrieveAllItems()
// Function: Retrievesw all items from hash
// Pre:		 data is initialized
// Post:	 None
{
	QueueType<ItemType> temp = QueueType<ItemType>();

	for (unsigned int i = 0; i < ARRAY_SIZE ; i++)
	{
		if (data[i] != deletedItem && data[i] != emptyItem)
			temp.EnQueue(data[i]);
	}

	return temp;
}

template <class ItemType>
void Hash<ItemType>::Display(ostream& outStream)
// Function: Displays hash table
// Pre:		 data is intialized
// Post:	 None
{

	for (unsigned int i = 0; i < ARRAY_SIZE; i++)
		outStream << i << "\t" << data[i] << endl;
}

template <class ItemType>
unsigned int Hash<ItemType>::GetLength()
// Function: Returns length of hash
// Pre:		 data is intialized
// Post:	 None
{
	return length;
}

template <class ItemType>
unsigned int Hash<ItemType>::GetASCIIHash(ItemType item)
// Function: Returns hash of item
// Pre:		 None
// Post:	 None
{
	stringstream sstream;
	sstream << item;
	string s = sstream.str();

	int temp = 0;
	for (unsigned int i = 0; i < s.length(); i++)
		temp += (int)(s[i]);

	temp %= ARRAY_SIZE;

	return temp;
}

template <class ItemType>
string Hash<ItemType>::GetMD5Hash(string message)
// Function: Returns md5 hash of message (from http://en.wikipedia.org/wiki/MD5)
// Pre:		 None
// Post:	 None
{
	const char *tmp = message.c_str();
    size_t initial_len = strlen(tmp);
	uint8_t *initial_msg = (uint8_t*)tmp;

	// Constants are the integer part of the sines of integers (in radians) * 2^32.
	const uint32_t k[64] = {
	0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee ,
	0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501 ,
	0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be ,
	0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821 ,
	0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa ,
	0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8 ,
	0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed ,
	0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a ,
	0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c ,
	0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70 ,
	0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05 ,
	0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665 ,
	0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039 ,
	0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1 ,
	0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1 ,
	0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391 };
 
	// leftrotate function definition
	#define LEFTROTATE(x, c) (((x) << (c)) | ((x) >> (32 - (c))))

	// Message (to prepare)
    uint8_t *msg = NULL;
    int new_len;
    uint32_t bits_len;
    int offset;
    uint32_t *w;
    uint32_t a, b, c, d, i, f, g, temp;
 
    // Note: All variables are unsigned 32 bit and wrap modulo 2^32 when calculating
 
    // r specifies the per-round shift amounts
    const uint32_t r[] = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
                          5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
                          4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
                          6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};
 
	uint32_t h0, h1, h2, h3;

    // Initialize variables - simple count in nibbles:
    h0 = 0x67452301;
    h1 = 0xefcdab89;
    h2 = 0x98badcfe;
    h3 = 0x10325476;
 
    // Pre-processing: adding a single 1 bit
    //append "1" bit to message    
    /* Notice: the input bytes are considered as bits strings,
       where the first bit is the most significant bit of the byte.[37] */
 
    // Pre-processing: padding with zeros
    //append "0" bit until message length in bit ≡ 448 (mod 512)
    //append length mod (2 pow 64) to message
 
    for(new_len = initial_len*8 + 1; new_len%512!=448; new_len++);
    new_len /= 8;
 
    msg = (uint8_t*)calloc(new_len + 64, 1); // also appends "0" bits 
                                   // (we alloc also 64 extra bytes...)
    memcpy(msg, initial_msg, initial_len);
    msg[initial_len] = 128; // write the "1" bit
 
    bits_len = 8*initial_len; // note, we append the len
    memcpy(msg + new_len, &bits_len, 4);           // in bits at the end of the buffer
 
    // Process the message in successive 512-bit chunks:
    //for each 512-bit chunk of message:
    for(offset=0; offset<new_len; offset += (512/8)) {
 
        // break chunk into sixteen 32-bit words w[j], 0 ≤ j ≤ 15
        w = (uint32_t *) (msg + offset);
 
        // Initialize hash value for this chunk:
        a = h0;
        b = h1;
        c = h2;
        d = h3;
 
        // Main loop:
        for(i = 0; i<64; i++) {
 
             if (i < 16) {
                f = (b & c) | ((~b) & d);
                g = i;
            } else if (i < 32) {
                f = (d & b) | ((~d) & c);
                g = (5*i + 1) % 16;
            } else if (i < 48) {
                f = b ^ c ^ d;
                g = (3*i + 5) % 16;          
            } else {
                f = c ^ (b | (~d));
                g = (7*i) % 16;
            }
 
             temp = d;
            d = c;
            c = b;
            b = b + LEFTROTATE((a + f + k[i] + w[g]), r[i]);
            a = temp;
 
        }
 
        // Add this chunk's hash to result so far:
        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
 
    }
 
    // cleanup
    free(msg);

	uint8_t *p;
	p=(uint8_t *)&h0;
	stringstream output;
	output << setfill('0') << setw(2) << hex << (int)p[0];
	output << setfill('0') << setw(2) << hex << (int)p[1];
	output << setfill('0') << setw(2) << hex << (int)p[2];
	output << setfill('0') << setw(2) << hex << (int)p[3];
	p=(uint8_t *)&h1;
	output << setfill('0') << setw(2) << hex << (int)p[0];
	output << setfill('0') << setw(2) << hex << (int)p[1];
	output << setfill('0') << setw(2) << hex << (int)p[2];
	output << setfill('0') << setw(2) << hex << (int)p[3];
	p=(uint8_t *)&h2;
	output << setfill('0') << setw(2) << hex << (int)p[0];
	output << setfill('0') << setw(2) << hex << (int)p[1];
	output << setfill('0') << setw(2) << hex << (int)p[2];
	output << setfill('0') << setw(2) << hex << (int)p[3];
	p=(uint8_t *)&h3;
	output << setfill('0') << setw(2) << hex << (int)p[0];
	output << setfill('0') << setw(2) << hex << (int)p[1];
	output << setfill('0') << setw(2) << hex << (int)p[2];
	output << setfill('0') << setw(2) << hex << (int)p[3];

	return (output.str());
}

template <class ItemType>
bool Hash<ItemType>::IsFull()
// Function: Checks to see if hash array is full
// Pre:		 data is intialized
// Post:	 Function value = (length equals ARRAY_SIZE);
{
	return (length == ARRAY_SIZE);
}

template <class ItemType>
bool Hash<ItemType>::IsEmpty()
// Function: Checks to see if hash array is empty
// Pre:		 data is intialized
// Post:	 Function value = (length equals zero);
{
	return (length == 0);
}

template <class ItemType>
unsigned int Hash<ItemType>::FindItemIndex(ItemType item)
// Function: Returns the index of item if found otherwise throw exception
// Pre:		 data is intialized
// Post:	 Function value = (index of item) if found, otherwise throws ItemNotFound exception
{
	int location;

	if (IsEmpty())
		throw ItemNotFound();
	else
	{
		location = GetHash(item);

		int startIndex = location;
		while (data[location] != emptyItem)
		{
			int nextLocation = (location + 1) % ARRAY_SIZE;

			if (data[location] == item)
				break;
			else if (nextLocation == startIndex)
				throw ItemNotFound();
			else
				location = nextLocation;
		}
	}

	return location;
}
#endif