#ifndef QUICKSORTERTEMPLATE
#define QUICKSORTERTEMPLATE

#include "quicksorter.h"

template <class ItemType>
// Constructor
QuickSorter<ItemType>::QuickSorter(ItemType* items, int size, char dType)
{
	arraySize = size;
	data = new ItemType[arraySize];
	comparisons = 0;

	if (dType == 'I' || dType == 'i')
		dt = INT;
	else
		dt = STR;

	for (int i = 0; i < arraySize; i++)
		data[i] = items[i];
}

template <class ItemType>
void QuickSorter<ItemType>::Sort()
// Function: Calls recursive function QuickSort
// Pre: data is unsorted
// Post: data is sorted
{
	QuickSort(0, arraySize - 1);
}

template <class ItemType>
ItemType* QuickSorter<ItemType>::GetData()
// Function: Returns a copy of data
// Pre: data array is initialized
// Post: Copy data is returned
{
	ItemType* temp = new ItemType[arraySize];

	for (int i = 0; i < arraySize; i++)
		temp[i] = data[i];

	return temp;
}

template<class ItemType>
int QuickSorter<ItemType>::GetComparisons()
// Function: Returns the number of comparisons while executing Sort
// Pre: data array is initialized
// Post: comparisons is returned
{
	return comparisons;
}

template <class ItemType>
void QuickSorter<ItemType>::Split(int first, int last, int& splitPoint)
// Function: Swaps elements of data within first and last so that elements before
//			 splitPoint are less than or equal to elements after splitPoint
// Pre:		 data array is initialized
// Post:	 the elements of data before splitPoint are less than or equal to the elements
//			 after splitPoint
{
	ItemType splitVal = data[last];
	int saveLast = last;
	bool onCorrectSide;

	last--;
	do
	{
		onCorrectSide = true;
		while (onCorrectSide)
		{
		    if (CompareValues(data[first], splitVal, GT))
				onCorrectSide = false;
			else
			{
				first++;
				onCorrectSide = (first <= last);
			}
		}

		onCorrectSide = (first <= last);
		while (onCorrectSide)
		{
			if (CompareValues(data[last], splitVal, LTEQ))
				onCorrectSide = false;
			else
			{
				last--;
				onCorrectSide = (first <= last);
			}
		}

		if (first < last)
		{
			Swap(first, last);
			first++;
			last--;
		}
	} while (first <= last);

	splitPoint = first;
	Swap(saveLast, splitPoint);
}

template <class ItemType>
void QuickSorter<ItemType>::Swap(int index1, int index2)
// Function: Swaps the value of data at index1 with data at index2
// Pre: data array is initialized
// Post: The value of data at index1 is swapped with the data at index 2
{
	ItemType temp = data[index1];
	data[index1] = data[index2];
	data[index2] = temp;
}

template <class ItemType>
void QuickSorter<ItemType>::QuickSort(int first, int last)
// Function: Recursively sorts data array
// Pre: data array is initialized
// Post: data array is sorted
{
	if (first < last)
	{
		int splitPoint;

		Split(first, last, splitPoint);
		QuickSort(first, splitPoint - 1);
		QuickSort(splitPoint + 1, last);
	}
}

template <class ItemType>
bool QuickSorter<ItemType>::CompareValues(string v1, string v2, compType cType)
// Function: Compares two values using a string or integer comparison
// Pre: data array is initialized
// Post: returns bool value of comparison
{
	comparisons++;

	if (dt == INT)
	{
		switch(cType)
		{
			case GT:
				return (atoi(v1.c_str()) > atoi(v2.c_str()));
				break;
			case GTEQ:
				return (atoi(v1.c_str()) >= atoi(v2.c_str()));
				break;
			case EQ:
				return (atoi(v1.c_str()) == atoi(v2.c_str()));
				break;
			case LT:
				return (atoi(v1.c_str()) < atoi(v2.c_str()));
				break;
			case LTEQ:
				return (atoi(v1.c_str()) <= atoi(v2.c_str()));
				break;
		}
	}
	else
	{
		switch(cType)
		{
			case GT:
				return (v1 > v2);
				break;
			case GTEQ:
				return (v1 >= v2);
				break;
			case EQ:
				return (v1 == v2);
				break;
			case LT:
				return (v1 < v2);
				break;
			case LTEQ:
				return (v1 <= v2);
				break;
		}
	}
}

#endif