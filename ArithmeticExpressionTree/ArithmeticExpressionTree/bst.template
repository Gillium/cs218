#ifndef TEMPLATE_BST
#define TEMPLATE_BST

#include "bst.h"

// Constructor
template <class ItemType>
BST<ItemType>::BST()
{
	root = NULL;
}

// Destructor
template <class ItemType>
BST<ItemType>::~BST()
// Function: Calls recursive function Destroy to destroy the tree
{
	Destroy(root);
}

// Copy constructor
template <class ItemType>
BST<ItemType>::BST(const BST& originalTree)
// Function: Calls the recursive function CopyTree to copy originalTree into root.
{
	CopyTree(root, originalTree.root);
}

template <class ItemType>
void BST<ItemType>::operator=(BST& originalTree)
// Calls the recursive function CopyTree to copy originalTree into root.
{
	if (&originalTree == this)
		// Ignore assigning self to self.
		return;
	//Deallocate existing tree nodes.
	Destroy(root);
	copyTree(root, originalTree.root);
}

template <class ItemType>
void BST<ItemType>::MakeEmpty()
// Function: Initializes tree to empty state.
// Post:	 Tree exists and is empty.
{
	Destroy(root);
	root = NULL;
}

template <class ItemType>
bool BST<ItemType>::IsEmpty() const
// Function: Returns true if the tree is empty and false otherwise.
// Post:	 Function value = (tree is empty).
{
	return root == NULL;
}

template <class ItemType>
bool BST<ItemType>::IsFull() const
// Function: Returns true if the free store has no room for another node and false otherwise.
// Post:	 Function Value = (tree is full).
{
	TreeNode<ItemType>* location;
	try
	{
		location = new TreeNode<ItemType>;
		delete location;
		return false;
	}
	catch(std::bad_alloc exception)
	{
		return true;
	}
}

template <class ItemType>
int BST<ItemType>::GetLength() const
// Function: Calls the recursive function CountNodes to count the nodes in the tree.
// Post:	 Function value = number of elements in tree.
{
	return CountNodes(root);
}

template <class ItemType>
ItemType BST<ItemType>::GetItem(ItemType item, bool& found) const
// Function: Calls recursive function Retrieve to search the tree for item.
// Pre:		 Key member of item is initalized.
// Post:	 If there is an element someItem whose key matches item's key, then
//			 found = true and a copy of someItem is returned; otherwise, found = false
//			 and item is returned. Tree is unchanged.
{
	Retrieve(root, item, found);
	return item;
}

template <class ItemType>
void BST<ItemType>::PutItem(ItemType item)
// Function: Calls the recursive function Insert to insert item into tree.
// Pre:		 Tree is not full. Item is not in tree.
// Post:	 Item is in tree. Binary search property is maintained.
{
	Insert(root, item);
}

template <class ItemType>
void BST<ItemType>::DeleteItem(ItemType item)
// Function: Calls the recursive function Delete to delete item from tree.
// Pre:		 Key member of item is initialized. One and only one element in tree has
//			 a key matching item's key.
// Post:	 No element in tree has a key matching item's key.
{
	Delete(root, item);
}

template <class ItemType>
void BST<ItemType>::ResetTree(OrderType order)
// Function: Calls a function to create a queue of the tree elements in the desider order
// Post:	 Current position is prior to root of tree.
{
	switch(order)
	{
		case PRE_ORDER: PreOrder(root, preQue);
						break;
		case IN_ORDER:	InOrder(root, inQue);
						break;
		case POST_ORDER: PostOrder(root, postQue);
						break;
	}
}

template <class ItemType>
ItemType BST<ItemType>::GetNextItem(OrderType order, bool& finished)
// Function: Returns the next item in the desired order.
// Post:	 For the desired order, item is the next item in the queue. If item is the
//			 last one in the queue, finished is true; otherwise, finished is false.
{
	ItemType item;
	finished = false;

	switch (order)
	{
		case PRE_ORDER : preQue.Dequeue(item);
						 if (preQue.IsEmpty())
							 finished = true;
						 break;
		case IN_ORDER  : inQue.Dequeue(item);
						 if (inQue.IsEmpty())
							 finished = true;
						 break;
		case POST_ORDER: postQue.Dequeue(item);
						 if (postQue.IsEmpty())
							 finished = true;
						 break;
	}

	return item;
}

template <class ItemType>
void BST<ItemType>::Print(std::ostream& outFile) const
// Function: Calls Recursive function Print to print items in the tree.
// Pre:		 outFile has been opened for writing.
// Post:	 Items in the tree have been printed in ascending key order. outFile is still open.
{
	PrintTree(root, outFile);
}

template <class ItemType>
void BST<ItemType>::Destroy(TreeNode<ItemType>*& tree)
// Post: tree is empty; nodes have been deallocated.
{
	if (tree != NULL)
	{
		Destroy(tree->left);
		Destroy(tree->right);
		delete tree;
	}
}

template <class ItemType>
void BST<ItemType>::CopyTree(TreeNode<ItemType>*& copy, const TreeNode<ItemType>* originalTree)
// Post: copy is the root of a tree that is a duplicate of orginalTree.
{
	if(originalTree == NULL)
		copy = NULL;
	else
	{
		copy = new TreeNode<ItemType>;
		copy->info = originalTree->info;
		CopyTree(copy->left, originalTree->left);
		CopyTree(copy->right, originalTree->right);
	}
}

template <class ItemType>
int BST<ItemType>::CountNodes(TreeNode<ItemType>* tree)
// Post:	Returns the number of nodes in the tree
{
	if (tree == NULL)
		return 0;
	else
		return countNodes(tree->left) + CountNodes(tree->right) + 1;
}

template <class ItemType>
void BST<ItemType>::Retrieve(TreeNode<ItemType>* tree, ItemType& item, bool& found)
// Function: Recursively searches tree for item
// Post:	 If there is an element someItem whose key matches item's, found is true
//			 and item is set to a copyu of someItem; otherwise, found is false and
//			 item is unchanged
{
	if (tree == NULL)
		// item is not found.
		found = false;
	else if (item < tree->info)
		// Search left subtree.
		Retrieve(tree->left, item, found);
	else if (item > tree->info)
		// Search right subtree.
		Retrieve(tree->right, item, found);
	else
	{
		// item is found
		item = tree->info;
		found = true;
	}
}

template <class ItemType>
void BST<ItemType>::Insert(TreeNode<ItemType>*& tree, ItemType item)
// Function: Inserts item into tree.
// Post:	 item is in tree; search property is maintained
{
	if (tree == NULL)
	{
		// Insertion place found.
		tree = new TreeNode<ItemType>;
		tree->right = NULL;
		tree->left = NULL;
		tree->info = item;
	}
	else if (item < tree->info)
		// Insert in left subtree
		Insert(tree->left, item);
	else
		// Insert in right subtree
		Insert(tree->right, item);
}

template <class ItemType>
void BST<ItemType>::DeleteNode(TreeNode<ItemType>*& tree)
// Function: Deletes the node pointed to by tree.
// Post:	 The user's data in the node pointed to by tree is no longer in the tree. If
//			 tree is a leaf node or has only one non-NULL child pointer, the node pointed
//			 to by tree is deleted; otherwise, the user's data is replaced by its logical
//			 predecessor and the predecessor's node is deleted.
{
	ItemType data;
	TreeNode<ItemType>* tempPtr;

	tempPtr = tree;
	if (tree->left == NULL)
	{
		tree = tree->right;
		delete tempPtr;
	}
	else if (tree->right == NULL)
	{
		tree = tree->left;
		delete tempPtr;
	}
	else
	{
		GetPredecessor(tree->left, data);
		tree->info = data;
		// Delete predecessor node.
		Delete(tree->left, data);
	}
}

template <class ItemType>
void BST<ItemType>::Delete(TreeNode<ItemType>*& tree, ItemType item)
// Function: Deletes item from tree
// Post:	 Item is not in tree
{
	if (item < tree->info)
		// Look in left subtree.
		Delete(tree->left, item);
	else if (item > tree->info)
		// Look in right subtree.
		Delete(tree->right, item);
	else
		// Node found; call DeleteNode.
		DeleteNode(tree);
}

template <class ItemType>
void BST<ItemType>::GetPredecessor(TreeNode<ItemType>* tree, ItemType& data)
// Function: Sets data to the info member of the rightmost node in tree
{
	while (tree->right != NULL)
		tree = tree->right;

	data = tree->info;
}

template <class ItemType>
void BST<ItemType>::PreOrder(TreeNode<ItemType>*, QueueType<ItemType>&)
// Function: Enqueues tree items in preorder
{
	if (tree != NULL)
	{
		preQue.Enqueue(tree->info);
		PreOrder(tree->left, preQue);
		PreOrder(tree->right, preQue);
	}
}

template <class ItemType>
void BST<ItemType>::InOrder(TreeNode<ItemType>*, QueueType<ItemType>&)
// Function: Enqueues tree items in inorder
{
	if (tree != NULL)
	{
		InOrder(tree->left, inQue);
		inQue.Enqueue(tree->info);
		InOrder(tree->right, inQue);
	}
}

template <class ItemType>
void BST<ItemType>::PostOrder(TreeNode<ItemType>*, QueueType<ItemType>&)
// Function: Enqueues tree items in postorder
{
	if (tree!= NULL)
	{
		PostOrder(tree->left, postQue);
		PostOrder(tree->right, postQue);
		postQue.Enqueue(tree->info);
	}
}

template <class ItemType>
void BST<ItemType>::PrintTree(TreeNode<ItemType>* tree, std::ostream& outFile) const
// Prints info member of items in tree in sorted order on outFile.
{
	if (tree != NULL)
	{
		// Print left subtree.
		PrintTree(tree->left, outFile);
		outFile << tree->info;
		// Print right subtree.
		PrintTree(tree->right, outFile);
	}
}

#endif