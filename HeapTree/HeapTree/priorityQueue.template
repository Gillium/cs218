#include "priorityQueue.h"
#ifndef PRIORITYQUEUETEMPLATE
#define PRIORITYQUEUETEMPLATE

template <class T>
void PriorityQueueType<T>::Enqueue(T newItem)
// Function: Adds newItem to the queue
// Pre:		 PriorityQueue is initialized
// Post:	 If (the priority queue is full), exception FullPQ is thrown; else newItem is in the queue
{
	NodeType<T>* temp = new NodeType<T>;
	temp->data = newItem;

	if(IsEmpty())
	{
		rearPTR = temp;
		temp->next = rearPTR;
	}
	else
	{
		NodeType<T>* prevPTR;
		prevPTR = rearPTR;
		NodeType<T>* tempPTR;
		tempPTR = rearPTR->next;

		do
		{
			if (tempPTR->data > newItem)
			{
				temp->next = tempPTR;
				prevPTR->next = temp;
				break;
			}
			
			prevPTR = prevPTR->next;
			tempPTR = tempPTR->next;

		}while(tempPTR != rearPTR->next);
	}

	length++;
}

template <class T>
void PriorityQueueType<T>::DeQueue(T &item)
{
	return (QueueType<T>::DeQueue(item));
}

template <class T>
void PriorityQueueType<T>::Print(std::ostream& outStream)
// Function: PriorityQueue is printed
// Pre:		 PriorityQueue is initialized, outFile is open for writing
// Post:	 elements are streamed to outStream
{

}

template <class T>
bool PriorityQueueType<T>::IsEmpty()
{
	return (QueueType<T>::IsEmpty());
}

#endif