#include "avlt.h"
#ifndef TEMPLATE_AVLT
#define TEMPLATE_AVLT

// Constructor
template <class ItemType>
AVLT<ItemType>::AVLT()
{
	root = NULL;
}

// Destructor
template <class ItemType>
AVLT<ItemType>::~AVLT()
// Function: Calls recursive function Destroy to destroy the tree
{
	Destroy(root);
}

// Copy constructor
template <class ItemType>
AVLT<ItemType>::AVLT(const AVLT& originalTree)
// Function: Calls the recursive function CopyTree to copy originalTree into root.
{
	CopyTree(root, originalTree.root);
}

template <class ItemType>
void AVLT<ItemType>::operator=(AVLT& originalTree)
// Calls the recursive function CopyTree to copy originalTree into root.
{
	if (&originalTree == this)
		// Ignore assigning self to self.
		return;
	//Deallocate existing tree nodes.
	Destroy(root);
	copyTree(root, originalTree.root);
}

template <class ItemType>
void AVLT<ItemType>::MakeEmpty()
// Function: Initializes tree to empty state.
// Post:	 Tree exists and is empty.
{
	Destroy(root);
	root = NULL;
}

template <class ItemType>
bool AVLT<ItemType>::IsEmpty() const
// Function: Returns true if the tree is empty and false otherwise.
// Post:	 Function value = (tree is empty).
{
	return root == NULL;
}

template <class ItemType>
bool AVLT<ItemType>::IsFull() const
// Function: Returns true if the free store has no room for another node and false otherwise.
// Post:	 Function Value = (tree is full).
{
	AVLTNode<ItemType>* location;
	try
	{
		location = new AVLTNode<ItemType>;
		delete location;
		return false;
	}
	catch(std::bad_alloc exception)
	{
		return true;
	}
}

template <class ItemType>
int AVLT<ItemType>::GetLength() const
// Function: Calls the recursive function CountNodes to count the nodes in the tree.
// Post:	 Function value = number of elements in tree.
{
	return CountNodes(root);
}

template <class ItemType>
ItemType AVLT<ItemType>::GetItem(ItemType item, bool& found) const
// Function: Calls recursive function Retrieve to search the tree for item.
// Pre:		 Key member of item is initalized.
// Post:	 If there is an element someItem whose key matches item's key, then
//			 found = true and a copy of someItem is returned; otherwise, found = false
//			 and item is returned. Tree is unchanged.
{
	Retrieve(root, item, found);
	return item;
}

template <class ItemType>
void AVLT<ItemType>::PutItem(ItemType item)
// Function: Calls the recursive function Insert to insert item into tree.
// Pre:		 Tree is not full. Item is not in tree.
// Post:	 Item is in tree. Binary search property is maintained.
{
	Insert(item);
}

template <class ItemType>
void AVLT<ItemType>::DeleteItem(ItemType item)
// Function: Calls the recursive function Delete to delete item from tree.
// Pre:		 Key member of item is initialized. One and only one element in tree has
//			 a key matching item's key.
// Post:	 No element in tree has a key matching item's key.
{
	Delete(root, item);
}

template <class ItemType>
void AVLT<ItemType>::ResetTree(OrderType order)
// Function: Calls a function to create a queue of the tree elements in the desider order
// Post:	 Current position is prior to root of tree.
{
	switch(order)
	{
		case PRE_ORDER: PreOrder(root, preQue);
						break;
		case IN_ORDER:	InOrder(root, inQue);
						break;
		case POST_ORDER: PostOrder(root, postQue);
						break;
	}
}

template <class ItemType>
ItemType AVLT<ItemType>::GetNextItem(OrderType order, bool& finished)
// Function: Returns the next item in the desired order.
// Post:	 For the desired order, item is the next item in the queue. If item is the
//			 last one in the queue, finished is true; otherwise, finished is false.
{
	ItemType item;
	finished = false;

	switch (order)
	{
		case PRE_ORDER : preQue.DeQueue(item);
						 if (preQue.IsEmpty())
							 finished = true;
						 break;
		case IN_ORDER  : inQue.DeQueue(item);
						 if (inQue.IsEmpty())
							 finished = true;
						 break;
		case POST_ORDER: postQue.DeQueue(item);
						 if (postQue.IsEmpty())
							 finished = true;
						 break;
	}

	return item;
}

template <class ItemType>
void AVLT<ItemType>::Print(std::ostream& outFile)
// Function: Calls Recursive function Print to print items in the tree.
// Pre:		 outFile has been opened for writing.
// Post:	 Items in the tree have been printed in ascending key order. outFile is still open.
{
	//PrintTree(root, outFile);
	ResetTree(PRE_ORDER);
	bool isFinished = false;
	while (!isFinished)
	{
		outFile << GetNextItem(PRE_ORDER, isFinished);
	}
}

template <class ItemType>
void AVLT<ItemType>::Destroy(AVLTNode<ItemType>*& tree)
// Post: tree is empty; nodes have been deallocated.
{
	if (tree != NULL)
	{
		Destroy(tree->left);
		Destroy(tree->right);
		delete tree;
	}
}

template <class ItemType>
void AVLT<ItemType>::CopyTree(AVLTNode<ItemType>*& copy, const AVLTNode<ItemType>* originalTree)
// Post: copy is the root of a tree that is a duplicate of orginalTree.
{
	if(originalTree == NULL)
		copy = NULL;
	else
	{
		copy = new AVLTNode<ItemType>;
		copy->info = originalTree->info;
		CopyTree(copy->left, originalTree->left);
		CopyTree(copy->right, originalTree->right);
	}
}

template <class ItemType>
int AVLT<ItemType>::CountNodes(AVLTNode<ItemType>* tree)
// Post:	Returns the number of nodes in the tree
{
	if (tree == NULL)
		return 0;
	else
		return countNodes(tree->left) + CountNodes(tree->right) + 1;
}

template <class ItemType>
void AVLT<ItemType>::Retrieve(AVLTNode<ItemType>* tree, ItemType& item, bool& found)
// Function: Recursively searches tree for item
// Post:	 If there is an element someItem whose key matches item's, found is true
//			 and item is set to a copyu of someItem; otherwise, found is false and
//			 item is unchanged
{
	if (tree == NULL)
		// item is not found.
		found = false;
	else if (item < tree->info)
		// Search left subtree.
		Retrieve(tree->left, item, found);
	else if (item > tree->info)
		// Search right subtree.
		Retrieve(tree->right, item, found);
	else
	{
		// item is found
		item = tree->info;
		found = true;
	}
}

template <class ItemType>
void AVLT<ItemType>::Insert(const ItemType &item)
// Function: Inserts item into tree.
// Post:	 item is in tree; search property is maintained
{
	bool isTaller = false;

    AVLTNode<ItemType> *newNode;
    newNode = new AVLTNode<ItemType>;
    newNode->info = item;
    newNode->bfactor = 0;
    newNode->left = NULL;
    newNode->right = NULL;

    InsertIntoAVL(root, newNode, isTaller);
}

template <class ItemType>
void AVLT<ItemType>::DeleteNode(AVLTNode<ItemType>*& tree)
// Function: Deletes the node pointed to by tree.
// Post:	 The user's data in the node pointed to by tree is no longer in the tree. If
//			 tree is a leaf node or has only one non-NULL child pointer, the node pointed
//			 to by tree is deleted; otherwise, the user's data is replaced by its logical
//			 predecessor and the predecessor's node is deleted.
{
	ItemType data;
	AVLTNode<ItemType>* tempPtr;

	tempPtr = tree;
	if (tree->left == NULL)
	{
		tree = tree->right;
		delete tempPtr;
	}
	else if (tree->right == NULL)
	{
		tree = tree->left;
		delete tempPtr;
	}
	else
	{
		GetPredecessor(tree->left, data);
		tree->info = data;
		// Delete predecessor node.
		Delete(tree->left, data);
	}
}

template <class ItemType>
void AVLT<ItemType>::Delete(AVLTNode<ItemType>*& tree, ItemType item)
// Function: Deletes item from tree
// Post:	 Item is not in tree
{
	if (item < tree->info)
		// Look in left subtree.
		Delete(tree->left, item);
	else if (item > tree->info)
		// Look in right subtree.
		Delete(tree->right, item);
	else
		// Node found; call DeleteNode.
		DeleteNode(tree);
}

template <class ItemType>
void AVLT<ItemType>::GetPredecessor(AVLTNode<ItemType>* tree, ItemType& data)
// Function: Sets data to the info member of the rightmost node in tree
{
	while (tree->right != NULL)
		tree = tree->right;

	data = tree->info;
}

template <class ItemType>
void AVLT<ItemType>::PreOrder(AVLTNode<ItemType>* tree, QueueType<ItemType>&)
// Function: Enqueues tree items in preorder
{
	if (tree != NULL)
	{
		preQue.EnQueue(tree->info);
		PreOrder(tree->left, preQue);
		PreOrder(tree->right, preQue);
	}
}

template <class ItemType>
void AVLT<ItemType>::InOrder(AVLTNode<ItemType>* tree, QueueType<ItemType>&)
// Function: Enqueues tree items in inorder
{
	if (tree != NULL)
	{
		InOrder(tree->left, inQue);
		inQue.EnQueue(tree->info);
		InOrder(tree->right, inQue);
	}
}

template <class ItemType>
void AVLT<ItemType>::PostOrder(AVLTNode<ItemType>* tree, QueueType<ItemType>&)
// Function: Enqueues tree items in postorder
{
	if (tree!= NULL)
	{
		PostOrder(tree->left, postQue);
		PostOrder(tree->right, postQue);
		postQue.EnQueue(tree->info);
	}
}

template <class ItemType>
void AVLT<ItemType>::PrintTree(AVLTNode<ItemType>* tree, std::ostream& outFile) const
// Function: Prints info member of items in tree in sorted order on outFile.
{
	if (tree != NULL)
	{
		// Print left subtree.
		PrintTree(tree->left, outFile);
		outFile << tree->info;
		// Print right subtree.
		PrintTree(tree->right, outFile);
	}
}

template <class ItemType>
void AVLT<ItemType>::RotateToLeft(AVLTNode<ItemType>* &tree)
// Function: Rotates nodes left
{
	// pointer to the root of the right subtree of root
	AVLTNode<ItemType> *p;
	
	if (tree == NULL)
		cout << "Error in the tree." << endl;
	else
		if (tree->right == NULL)
			cout << "Error in the tree: No right subtree to rotate." << endl;
		else
		{
			p = tree->right;
			// The left subtree of p becomes the right subtree of tree
			tree->right = p->left;
			p->left = tree;
			// Make p the new tree node
			tree = p;
		}
}

template <class ItemType>
void AVLT<ItemType>::RotateToRight(AVLTNode<ItemType>* &tree)
// Function: Rotates nodes right
{
	// Pointer to the root of the left subtree of root
	AVLTNode<ItemType> *p;
	
	if (tree == NULL)
		cout << "Error in the tree." << endl;
	else
	{
		if (tree->left == NULL)
			cout << "Error in the tree: No left subtree to rotate." << endl;
		else
		{
			p = tree->left;
			// The right subtree of p becomes the left subtree of tree
			tree->left = p->right;
			p->right = tree;
			// Make p the new tree node
			tree = p;
		}
	}
}

template<class ItemType>
void AVLT<ItemType>::BalanceFromLeft(AVLTNode<ItemType>*& tree)
{
     AVLTNode<ItemType> *p;
     AVLTNode<ItemType> *w;

	 //p points to the left subtree of root
     p = tree->left;

     switch(p->bfactor)
     {
		 case -1: tree->bfactor = 0;
				  p->bfactor = 0;
				  RotateToRight(tree);
				  break;
		 case 0:  cout << "Error: Cannot balance from the left." << endl;
				  break;
		 case 1:  w = p->right;
				  // Adjust the balance factors
				  switch(w->bfactor)  
				  {
					  case -1: tree->bfactor = 1;
							   p->bfactor = 0;
							   break;
					  case 0:  tree->bfactor = 0;
							   p->bfactor = 0;
							   break; 
					  case 1:  tree->bfactor = 0;
							   p->bfactor = -1;
				  }

				  w->bfactor = 0;	
				  RotateToLeft(p);
				  tree->left = p;
				  RotateToRight(tree);
     }
}

template<class ItemType>
void AVLT<ItemType>::BalanceFromRight(AVLTNode<ItemType>* &tree)
{
     AVLTNode<ItemType> *p;
     AVLTNode<ItemType> *w;

	 // p points to the right subtree of root
     p = tree->right;   

     switch(p->bfactor)
     {
		 case -1: w = p->left;
				  // Adjust the balance factors
				  switch(w->bfactor)  
				  {
					  case -1: tree->bfactor = 0;
							   p->bfactor = 1;
							   break;
					  case 0:  tree->bfactor = 0;
							   p->bfactor = 0;
							   break;		
					  case 1:  tree->bfactor = -1;
							   p->bfactor = 0;
				  }

				  w->bfactor = 0;	
				  RotateToRight(p);
				  tree->right = p;
				  RotateToLeft(tree);
				  break;
		 case 0:  cout << "Error: Cannot balance from the right." << endl;
				  break;
		 case 1:  tree->bfactor = 0;
				  p->bfactor = 0;
				  RotateToLeft(tree);
     }
}

template<class ItemType>
void AVLT<ItemType>::InsertIntoAVL(AVLTNode<ItemType>* &tree, AVLTNode<ItemType>* newNode, bool& isTaller)
{
    if(tree == NULL)
    {
       tree = newNode; // ?? why doesn't this insert the node unless root
       isTaller = true;
    }
    else
	{
       if (tree->info == newNode->info)
          cout << "No duplicates are allowed." << endl;
       else
	   {
		  // newItem goes in the left subtree
          if (tree->info > newNode->info) 
          {
             InsertIntoAVL(tree->left, newNode, isTaller);

			 // After insertion, the subtree grew in height
             if(isTaller)
			 {
                switch(tree->bfactor)
                {
						case -1: BalanceFromLeft(tree);
								 isTaller = false;
								 break;
						case 0:  tree->bfactor = -1;
								 isTaller = true;
								 break;
						case 1:  tree->bfactor = 0;
								 isTaller = false;
                }
			}
			else
			{
				InsertIntoAVL(tree->right, newNode, isTaller);

				// After insertion, the subtree grew in height
				if(isTaller)  
				{              
					switch(tree->bfactor)
					{
						case -1: tree->bfactor = 0;
								 isTaller = false;
								 break;
						case 0:  tree->bfactor = 1;
								 isTaller = true;
								 break;
						case 1:  BalanceFromRight(tree);
								 isTaller = false;
					}
				}
			}
		}
	  }
	}
}
#endif