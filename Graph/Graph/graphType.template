#include "graphType.h"
#include "stack.h"
#ifndef GRAPHTEMPLATE
#define GRAPHTEMPLATE

template <class VertexType, class EdgeValueType>
GraphType<VertexType, EdgeValueType>::GraphType()
// Constructor
// Pre:	 None
// Post: GraphType is intialized, numVertices set to zero
{
	numVertices = 0;
	numEdges = 0;
	isWeighted = true;
	isDirected = true;

	// vertices does not need to be initialized since we are storing numVertices

	for (int i = 0; i < MAX_VERTICES; i++) {
		for (int j = 0; j < MAX_VERTICES; j++) {
			edges[i][j] = (EdgeValueType)(0);
			edgesU[i][j] = (EdgeValueType)(0);
		}
	}

	for (int i = 0; i < MAX_VERTICES; i++)
		marks[i] = false;
}

template <class VertexType, class EdgeValueType>
GraphType<VertexType, EdgeValueType>::~GraphType()
// Deconstructor
// Pre:	 GraphType is initialized
// Post: deletes vertices, edges
{
	
}

template <class VertexType, class EdgeValueType>
GraphType<VertexType, EdgeValueType>::GraphType(const GraphType<VertexType, EdgeValueType>& acopy)
// Copy constructor
// Pre:	 GraphType is initialized
// Post: Graph is initialized with values from acopy
{
	numVertices = acopy.numVertices;
	numEdges = acopy.numEdges;
	isWeighted = acopy.isWeighted;
	isDirected = acopy.isDirected;

	for (int i = 0; i < MAX_VERTICES; i++)
		vertices[i] = acopy.vertices[i];

	for (int i = 0; i < MAX_VERTICES; i++) {
		for (int j = 0; j < MAX_VERTICES; j++) {
			edges[i][j] = acopy.edges[i][j];
			edgesU[i][j] = acopy.edgesU[i][j];
		}
	}

	for (int i = 0; i < MAX_VERTICES; i++)
		marks[i] = acopy.marks[i];
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::MakeEmpty()
// Function: Initializes the graph to an empty state
// Pre:		 GraphType is initialized
// Post:	 marks, vertices, edges are empty, numVertices is zero
{
	numVertices = 0;
	numEdges = 0;

	// vertices does not need to be initialized since we are storing numVertices

	for (int i = 0; i < MAX_VERTICES; i++) {
		for (int j = 0; j < MAX_VERTICES; j++) {
			edges[i][j] = (EdgeValueType)(0);
			edgesU[i][j] = (EdgeValueType)(0);
		}
	}

	for (int i = 0; i < MAX_VERTICES; i++)
		marks[i] = false;
}

template <class VertexType, class EdgeValueType>
bool GraphType<VertexType, EdgeValueType>::IsEmpty()
// Function: Tests whether the graph is empty
// Pre:		 GraphType is initialized
// Post:	 Function value = (graph is empty)
{
	return (numVertices == 0);
}

template <class VertexType, class EdgeValueType>
bool GraphType<VertexType, EdgeValueType>::IsFull()
// Function: Tests whether the graph is full
// Pre:		 GraphType is initialized
// Post:	 Function value = (graph is full)
{
	return (numVertices == MAX_VERTICES);
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::AddVertex(VertexType vertex)
// Function: Adds vertex to the graph
// Pre:		 GraphType is initialized, Graph is not full
// Post:	 vertex is in vertices, numVertices is incremented
{
	vertices[numVertices++] = vertex;
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::AddEdge(VertexType fromVertex, VertexType toVertex, EdgeValueType weight)
// Function: Adds an edge with the specified weight from fromVertex to toVertex
// Pre:		 GraphType is initialized, fromVertex and toVertex are in vertices
// Post:	 (fromVertex, toVertex) is in edges with the specified weight, throws NotFound exception when fromVertex or toVertex not in vertices
{
	try {
		if (isDirected) {
		  edges[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)] = weight;
		  edgesU[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)] = weight;
		  edgesU[GetVertexIndex(toVertex)][GetVertexIndex(fromVertex)] = weight;
		}
		else {
          edges[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)] = weight;
		  edges[GetVertexIndex(toVertex)][GetVertexIndex(fromVertex)] = weight;
		  edgesU[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)] = weight;
		  edgesU[GetVertexIndex(toVertex)][GetVertexIndex(fromVertex)] = weight;
		}
	} catch (NotFound) {
		throw NotFound();
	}
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::UpdateVertex(VertexType vertex)
// Function: Updates vertex in the graph
// Pre:      GraphType is initialized
// Post:     vertex in vertices is replaced with vertex
{
	vertices[GetVertexIndex(vertex)] = vertex;
}

template <class VertexType, class EdgeValueType>
EdgeValueType GraphType<VertexType, EdgeValueType>::GetWeight(VertexType fromVertex, VertexType toVertex)
// Function: Returns the weight of the edge from fromVertex to toVertex
// Pre:		 GraphType is initialized, fromVertex and toVertex are vertices
// Post:	 Function value = weight of edge from fromVertex to toVertex if edge exists, if edge does not exist function value = special "null-edge" value
{
	EdgeValueType retVal;
	if (isWeighted && isDirected)
	  retVal = edges[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)];
	else if (!isWeighted && isDirected) {
		if (edges[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)] == 0)
			retVal = (EdgeValueType)0;
		else
		    retVal = (EdgeValueType)1;
	}
	else if (isWeighted && !isDirected)
		 retVal = edgesU[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)];
	else if (!isWeighted && !isDirected) {
		if (edgesU[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)] == 0)
			retVal = (EdgeValueType)0;
		else
		    retVal = (EdgeValueType)1;
	}
	return retVal;
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::GetToVertices(VertexType fromVertex, QueueType<VertexType>& vertexQ)
// Function: Returns a queue of the vertices that are adjacent from fromVertex
// Pre:		 GraphType is initialized, fromVertex is in vertices
// Post:	 vertexQ contains the names of all vertices that are adjacent from fromVertex
{
	int fromVertexIndex = GetVertexIndex(fromVertex);
	for (int toVertexIndex = 0; toVertexIndex < numVertices; toVertexIndex++){
		if (isDirected) {
			if (edges[fromVertexIndex][toVertexIndex] != (EdgeValueType)(0))
				vertexQ.EnQueue(vertices[toVertexIndex]);
		} else {
			if (edgesU[fromVertexIndex][toVertexIndex] != (EdgeValueType)(0))
				vertexQ.EnQueue(vertices[toVertexIndex]);
		}
	}
}

template <class VertexType, class EdgeValueType>
bool GraphType<VertexType, EdgeValueType>::Search(VertexType& vertex)
// Function: Searches for a vertex in the graph
// Pre:		 GraphType is initialized
// Post:	 Function value = (vertex in vertices), vertex is set to vertex in vertices
{
	try {
		vertex = vertices[GetVertexIndex(vertex)];
		return true;
	} catch(NotFound) {
		return false;
	}
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::DeleteVertex(VertexType vertex)
// Function: Deletes vertex from graph and associated edges
// Pre:		 GraphType is initialized
// Post:	 vertices does not contain vertex and numVertices is decremented, NotFound exception thrown if vertex is not in vertices before function call
{
	try {
		int vertexIndex = GetVertexIndex(vertex);
		if (vertexIndex != numVertices - 1) {
			ReplaceVertex(numVertices - 1, vertexIndex);
		}
		numVertices--;
	} catch(NotFound) {
		throw NotFound();
	}
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::DeleteEdge(VertexType fromVertex, VertexType toVertex)
// Function: Deletes edge between fromVertex and toVertex
// Pre:		 GraphType is initialized
// Post:	 edges does not contain edge, NotFound exception thrown if fromVertex or toVertex is not in vertices
{
	try {
		if (isDirected) {
			edges[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)] = 0;
		    edgesU[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)] = 0;
			edgesU[GetVertexIndex(toVertex)][GetVertexIndex(fromVertex)] = 0;
		} else {
			edges[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)] = 0;
			edges[GetVertexIndex(toVertex)][GetVertexIndex(fromVertex)] = 0;
			edgesU[GetVertexIndex(fromVertex)][GetVertexIndex(toVertex)] = 0;
			edgesU[GetVertexIndex(toVertex)][GetVertexIndex(fromVertex)] = 0;
		}
	} catch (NotFound) {
		throw NotFound();
	}
}

template <class VertexType, class EdgeValueType>
int GraphType<VertexType, EdgeValueType>::GetVerticesCount()
// Function: Gets the number of vertices in the graph
// Pre:		 GraphType is initialized
// Post:	 Function return = (numVertices)
{
	return numVertices;
}

template <class VertexType, class EdgeValueType>
bool GraphType<VertexType, EdgeValueType>::IsConnected()
// Function: Determines if the graph is connected
// Pre:		 GraphType is initialized
// Post:	 Function value = (is graph connected)
{
	if (numVertices <= 1)
		return true;
	else {
		GraphType<VertexType, EdgeValueType> mst;
		mst.SetGraphType(true, false);
		FindMinimalSpanningTree(vertices[0], mst);
		return (mst.GetVerticesCount() == numVertices);
	}
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::ShortestPath(VertexType fromVertex, VertexType toVertex, QueueType<VertexType> &pathQ)
// Function: Finds the shortest path between two vertices
// Pre:		 GraphType is intialized
// Post:	 pathQ contains vertices describing the shortest path between fromVertex and toVertex, if no path exists throws PathNotFound exception
{
	try {
		GraphType<VertexType, EdgeValueType> mst;
		mst.SetGraphType(true, false);
		DepthFirstSearch(FindMinimalSpanningTree(fromVertex, mst), fromVertex, toVertex, pathQ);
	} catch(PathNotFound) {
		throw PathNotFound();
	}
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::FindMinimalSpanningTree(VertexType vertex, GraphType<VertexType, EdgeValueType>& mst)
// Function: Finds the subgraph of the graph containing the shortest paths between the vertices starting at vertex using Prim's algorithm
// Pre:		 GraphType is intialized
// Post:	 Function value = (graph describing minimal spanning tree)
{
	EdgeValueType min;
	Vertex vj, vk;

	// Set V(T) = {u}
	mst.AddVertex(vertex);
	for (int i = 0; i < numVertices; i++) {
		min = (EdgeValueType)INFINITY;
		for (int j = 0; j < numVertices; j++) {
			if (mst.Search(vertices[j])) {
				// vj is in V(T)
				for (int k = 0; k < numVertices; k++) {
					if (!mst.Search(vertices[k]) && (GetWeightIndex(j, k) < min)) {
						//if vk is not in T and weight[vj][vk] < minWeight
						vj = vertices[j];
						vk = vertices[k];
						min = GetWeightIndex(j, k);
					}
				}
			}
		}
		
		// V(T) = V(T) U {vk}
		mst.AddVertex(vk);
		// E(T) = E(T) U {(vj, vk)}
		mst.AddEdge(vj, vk, min);
	}
/*
	int fromVertexIndex = GetVertexIndex(vertex);
	int ne = 0;
	int x, y;
	EdgeValueType min;
	while (ne < numVertices - 1) {
		min = (EdgeValueType)INFINITY;
		for (int i = 0; i < numVertices; i++) {
			if (subgraph.Search(vertices[i])) {
				for (int j = 0; j < numVertices; j++) {
					if (!subgraph.Search(vertices[j])) {
						if (min > GetWeightIndex(i, j)) {
							min = GetWeightIndex(i, j);
							x = i;
							y = j;
						}
					}
				}
			}
			if ((min != 0) && (min != INFINITY)) {
				if (!subgraph.Search(vertices[y]))
					subgraph.AddVertex(vertices[y]);
				subgraph.AddEdge(vertices[x], vertices[y], min);
			}
			++ne;
		}
	}*/
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::GetAllVertices(QueueType<VertexType>& vertexQ)
// Function: Returns a queue of all the vertices
// Pre:		 GraphType is initialized
// Post:	 vertexQ contains all vertices in graph
{
	for (int i = 0; i < numVertices; i++)
		vertexQ.EnQueue(vertices[i]);
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::GetPath(VertexType fromVertex, VertexType toVertex, QueueType<VertexType> &pathQ, SearchType st)
// Function: Finds a path between fromVertex and toVertex using DFS
// Pre:		 GraphType is initialized
// Post:	 pathQ contains vertices describing a path between fromVertex and toVertex, if not path exists throws PathNotFound Exception
{
	try {
		switch (st)
		{
		case DFS:
			DepthFirstSearch(*this, fromVertex, toVertex, pathQ);
			break;
		case BFS:
			BreadthFirstSearch(*this, fromVertex, toVertex, pathQ);
			break;
		}
	} catch(PathNotFound) {
		throw PathNotFound();
	}
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::SetGraphType(bool weighted, bool directed)
// Function: Sets the graph type as weighted/unweighted and directed/undirected
// Pre:      GraphType is initialized
// Post:     isWeighted and isDirected are set to weighted and directed 
{
	isWeighted = weighted;
	isDirected = directed;
}

// Private functions
template <class VertexType, class EdgeValueType>
int GraphType<VertexType, EdgeValueType>::GetVertexIndex(VertexType vertex)
// Function: Returns the index for a vertex in the graph
// Pre:		 GraphType is initialized
// Post:	 if found Function value = (index of vertex), otherwise throw NotFound exception
{
	for (int i = 0; i < numVertices; i++) {
		if (vertices[i] == vertex)
			return i;
	}
	throw NotFound();
}

template <class VertexType, class EdgeValueType>
EdgeValueType GraphType<VertexType, EdgeValueType>::GetWeightIndex(int fromV, int toV)
// Function: Returns the weight of the edge from fromV to toV
// Pre:		 GraphType is initialized, fromV and toV are indices of vertices
// Post:	 Function value = weight of edge from fromV to toV if edge exists, if edge does not exist function value = special "null-edge" value
{
	EdgeValueType retVal;
	if (isWeighted && isDirected)
	  retVal = edges[fromV][toV];
	else if (!isWeighted && isDirected) {
		if (edges[fromV][toV] == 0)
			retVal = (EdgeValueType)0;
		else
		    retVal = (EdgeValueType)1;
	}
	else if (isWeighted && !isDirected)
		 retVal = edgesU[fromV][toV];
	else if (!isWeighted && !isDirected) {
		if (edgesU[fromV][toV] == 0)
			retVal = (EdgeValueType)0;
		else
		    retVal = (EdgeValueType)1;
	}
	return retVal;
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::ReplaceVertex(int fromVertexIndex, int toVertexIndex)
// Function: Replaces vertex and edges located at toVertexIndex with vertex and edges located at fromVertexIndex
// Pre:		 GraphType is initialized, fromVertexIndex and toVertexIndex are less than numVertices
// Post:	 Vertex and edges at toVertexIndex is replaced with values from fromVertexIndex
{
	vertices[toVertexIndex] = vertices[fromVertexIndex];

	for (int i = 0; i < numVertices;i++) {
		edges[toVertexIndex][i] = edges[fromVertexIndex][i];
		edges[i][toVertexIndex] = edges[i][fromVertexIndex];
		edgesU[toVertexIndex][i] = edgesU[fromVertexIndex][i];
		edgesU[i][toVertexIndex] = edgesU[i][fromVertexIndex];
	}
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::DepthFirstSearch(GraphType<VertexType, EdgeValueType> graph, VertexType fromVertex, VertexType toVertex, QueueType<VertexType> &pathQ)
// Function: Finds a path by traversing the graph using a LIFO stack to keep track of vertices to explore while marking vertices already visited
// Pre:		 GraphType is initialized
// Post:	 pathQ contains vertices describing a path between fromVertex and toVertex, if no path exists throws PathNotFound exception
{
	StackType<VertexType> stackV;
	QueueType<VertexType> vertexQ;

	bool found = false;
	VertexType vertex;
	VertexType item;

	graph.ClearMarks();
	stackV.Push(fromVertex);
	do
	{ 
		vertex = stackV.Top();
		stackV.Pop();
		if (vertex == toVertex)
		{
			pathQ.EnQueue(vertex);
			//cout << vertex;
			found = true;
		}
		else
		{
			if (!graph.IsMarked(vertex))
			{
				graph.MarkVertex(vertex);
				pathQ.EnQueue(vertex);
				//cout << vertex;
				graph.GetToVertices(vertex, vertexQ);

				while (!vertexQ.IsEmpty())
				{
					vertexQ.DeQueue(item);
					if (!graph.IsMarked(item))
						stackV.Push(item);
				}
			}
		}
	} while (!stackV.IsEmpty() && !found);
	if (!found)
		//cout << "Path not found." endl;
		throw PathNotFound();
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::BreadthFirstSearch(GraphType<VertexType, EdgeValueType> graph, VertexType fromVertex, VertexType toVertex, QueueType<VertexType> &pathQ)
// Function: Finds a path by traversing the graph using a FIFO queue to keep track of vertices to explore while marking vertices already visited
// Pre:		 GraphType is initialized
// Post:	 pathQ contains vertices describing a path between fromVertex and toVertex, if no path exists throws PathNotFound exception
{
	QueueType<VertexType> queueV;
	QueueType<VertexType> vertexQ;

	bool found = false;
	VertexType vertex;
	VertexType item;

	graph.ClearMarks();
	queueV.EnQueue(fromVertex);
	do
	{ 
		queueV.DeQueue(vertex);
		if (vertex == toVertex)
		{
			pathQ.EnQueue(vertex);
			//cout << vertex;
			found = true;
		}
		else
		{
			if (!graph.IsMarked(vertex))
			{
				graph.MarkVertex(vertex);
				pathQ.EnQueue(vertex);
				//cout << vertex;
				graph.GetToVertices(vertex, vertexQ);

				while (!vertexQ.IsEmpty())
				{
					vertexQ.DeQueue(item);
					if (!graph.IsMarked(item))
						queueV.EnQueue(item);
				}
			}
		}
	} while (!queueV.IsEmpty() && !found);
	if (!found)
		//cout << "Path not found." endl;
		throw PathNotFound();
}


template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::ClearMarks()
// Function: Sets marks for all vertices to false
// Pre:		 GraphType is initialized
// Post:	 All marks have been set to false
{
	for (int i =0; i < numVertices; i++) {
		marks[i] = false;
	}
}

template <class VertexType, class EdgeValueType>
void GraphType<VertexType, EdgeValueType>::MarkVertex(VertexType vertex)
// Function: Sets mark for vertex to true
// Pre:		 vertex is in vertices
// Post:	 IsMarked(vertex) is true
{
	marks[GetVertexIndex(vertex)] = true;
}

template <class VertexType, class EdgeValueType>
bool GraphType<VertexType, EdgeValueType>::IsMarked(VertexType vertex)
// Function: Determines if vertex has been marked
// Pre:		 vertex is in vertices
// Post:	 Function value = (vertex is marked true)
{
	return (marks[GetVertexIndex(vertex)]);
}

#endif